#!/bin/bash

# By Marc MERLIN <marc_soft@merlins.org>
# License: Apache-2.0

# Source: http://marc.merlins.org/linux/scripts/
# $Id: btrfs-subvolume-backup 1242 2016-05-31 22:47:09Z svnuser $
#
# Documentation and details at
# http://marc.merlins.org/perso/btrfs/2014-03.html#Btrfs-Tips_-Doing-Fast-Incremental-Backups-With-Btrfs-Send-and-Receive

# cron jobs might not have /sbin in their path.
export PATH="$PATH:/sbin"

set -o nounset
set -o errexit
set -o pipefail

# From https://btrfs.wiki.kernel.org/index.php/Incremental_Backup

# bash shortcut for `basename $0`
PROG=${0##*/}
lock=/var/run/$PROG

usage() {
    cat <<EOF
Usage: 
cd /mnt/source_btrfs_pool
$PROG	
	[--init] 
	[--keep|-k num]
	[--dest hostname] [--port|p 22]
	[--diff]
	[--lockname lockfile (without /var/run prepended)]
	[--postfix foo]
	volume_name /mnt/backup_btrfs_pool

Options:
    --help:          Print this help message and exit.
    --init:          For the first run, required to initialize the copy (only use once)
    --lockname|-l:   Override lockfile in /var/run: $PROG
    --keep num:      Keep the last snapshots for local backups (5 by default)
    --dest hostname: If present, ssh to that machine to make the copy.
    --port|-p:       Port number for ssh (defaults to 22).
    --postfix:	     postfix to add to snapshots
    --bckrot:	     secondary set of snapshots to rotate out for that volume
    		     (if the copy succeeds, its own snapshot history replaces an
		     out of band backup snapshot rotation).
    --diff:	     show an approximate diff between the snapshots

This will snapshot volume_name in a btrfs pool, and send the diff
between it and the previous snapshot (volume_name.last) to another btrfs
pool (on other drives)

If your backup destination is another machine, you'll need to add a few
ssh commands this script

The num snapshots to keep is to give snapshots you can recover data from 
and they get deleted after num runs. Set to 0 to disable (one snapshot will
be kept since it's required for the next diff to be computed).
EOF
    exit 0
}

die () {
    msg=${1:-}
    # don't loop on ERR
    trap '' ERR

    rm $lock

    echo "$msg" >&2
    echo >&2

    # This is a fancy shell core dumper
    if echo $msg | grep -q 'Error line .* with status'; then
	line=`echo $msg | sed 's/.*Error line \(.*\) with status.*/\1/'`
	echo " DIE: Code dump:" >&2
	awk '{ print FNR " " $0 }' $0 | grep -5 "\b$line\b" >&2
    fi
    
    exit 1
}

# Trap errors for logging before we die (so that they can be picked up
# by the log checker)
trap 'die "Error line $LINENO with status $?"' ERR

init=""
# Keep the last 5 snapshots by default
keep=5
TEMP=$(getopt --longoptions help,usage,init,keep:,dest:,port:,postfix:,bckrot:,diff,lockname: -o h,k:,d:,p:,b:,l: -- "$@") || usage
dest=localhost
ssh=""
pf=""
diff=""
port=22

# getopt quotes arguments with ' We use eval to get rid of that
eval set -- $TEMP

while :
do
    case "$1" in
        -h|--help|--usage)
            usage
            shift
            ;;

	--postfix)
	    shift
	    pf=_$1
	    lock="$lock.$pf"
	    shift
	    ;;

	--lockname|-l)
	    shift
	    lock="/var/run/$1"
	    shift
	    ;;

	--bckrot|-b)
	    shift
	    bckrot=_$1
	    shift
	    ;;

	--port|-p)
	    shift
	    port=$1
	    shift
	    ;;

	--keep|-k)
	    shift
	    keep=$1
	    shift
	    ;;

	--dest|-d)
	    shift
	    dest=$1
	    shift
	    ;;

	--init)
	    init=1
	    shift
	    ;;

	--diff)
	    diff=1
	    shift
	    ;;

	--)
	    shift
	    break
	    ;;

        *) 
	    echo "Internal error from getopt!"
	    exit 1
	    ;;
    esac
done
[[ $keep < 1 ]] && die "Must keep at least one snapshot for things to work ($keep given)"
[[ "$dest" != localhost ]] && ssh="ssh -p$port $dest"


DATE="$(date '+%Y%m%d_%H:%M:%S')"

[[ $# != 2 ]] && usage
vol="$1"
dest_pool="$2"

# If unset, we give it the same value as pf, to allow the ls line at the
# end to skip processing of special snapshots to rotate.
# If there are no snapshots with the given extension, unset that option
echo ${vol}${bckrot:-}.* | grep -q '\*' && bckrot=
bckrot=${bckrot:-${pf}_ro}

# shlock (from inn) does the right thing and grabs a lock for a dead process
# (it checks the PID in the lock file and if it's not there, it
# updates the PID with the value given to -p)
#if ! shlock -p $$ -f $lock; then
#    echo "$lock held for $PROG, quitting" >&2
#    exit
#fi
 
 
if [[ -z "$init" ]]; then
    test -e "${vol}${pf}_last" \
	|| die "Cannot sync $vol, ${vol}${pf}_last missing. Try --init?"
    src_snap="$(readlink -f ${vol}${pf}_last)"
fi
src_newsnap="${vol}${pf}_ro.$DATE"
src_newsnaprw="${vol}${pf}_rw.$DATE"

$ssh test -d "$dest_pool/" || die "ABORT: $dest_pool not a directory (on $dest)"

btrfs subvolume snapshot -r "$vol" "$src_newsnap"

if [[ -n "$diff" ]]; then
    echo diff between "$src_snap" "$src_newsnap"
    btrfs-diff "$src_snap" "$src_newsnap"
fi

# There is currently an issue that the snapshots to be used with "btrfs send"
# must be physically on the disk, or you may receive a "stale NFS file handle"
# error. This is accomplished by "sync" after the snapshot
sync

failed=""
if [[ -n "$init" ]]; then
    # Don't throttle speed on initial copy
    btrfs send "$src_newsnap" | $ssh btrfs receive -v "$dest_pool/$(dirname $src_newsnap)" || failed=1
else
    #echo "$src_snap" "$src_newsnap"
    if [[ -z "$ssh" ]]; then
	#removed ionice -c3 before each btrfs on next line
	btrfs send -p "$src_snap" "$src_newsnap" | btrfs receive "$dest_pool/$(dirname $src_newsnap)"\
	    || failed=1
    else
	# When backing up over ssh, the network should throttle the IO enough, no need to add a 
	# 2nd throttling on disk I/O. This can in extreme cases limit copies to 5GB per hour or so
	# on a local network that supports 50-100GB/h.
	btrfs send -p "$src_snap" "$src_newsnap" | $ssh btrfs receive "$dest_pool/$(dirname $src_newsnap)"\
	    || failed=1
    fi
fi
if [[ -n "$failed" ]]; then
    echo >&2
    echo "ABORT: btrfs send -p ${src_snap:-} $src_newsnap | $ssh btrfs receive $dest_pool/$(dirname $src_newsnap) failed" >&2
    btrfs subvolume delete "$src_newsnap" | grep -v 'Transaction commit:'
    $ssh btrfs subvolume delete "$dest_pool/$src_newsnap" | grep -v 'Transaction commit:'
    exit 1
fi

# We make a read-write snapshot in case you want to use it for a chroot
# and some testing with a writeable filesystem or want to boot from a
# last good known snapshot.
btrfs subvolume snapshot "$src_newsnap" "$src_newsnaprw"
$ssh btrfs subvolume snapshot "$dest_pool/$src_newsnap" "$dest_pool/$src_newsnaprw"

# Keep track of the last snapshot to send a diff against.
ln -snf "$(basename $src_newsnap)" "${vol}${pf}_last"
# The rw version can be used for mounting with subvol=vol_last_rw
ln -snf "$(basename $src_newsnaprw)" "${vol}${pf}_last_rw"
$ssh ln -snf "$(basename $src_newsnaprw)" "$dest_pool/${vol}${pf}_last_rw"

# How many snapshots to keep on the source btrfs pool (both read
# only and read-write).
# bckrot, if given, let you mix local rotating snapshots with
# btrfs backup snapshots. This in turn allows rotating out hourly
# snapshots when your snapshots to secondary disk have been working.
# Allow ${vol}${bckrot}.* to expand to null to avoid having ls look for
# a literal 'volname_daily.*' should none exist.
shopt -s nullglob
ls -rd ${vol}${pf}_ro.* ${vol}${bckrot}.* | sort -u | sort -r -t. -k2 | \
       	tail -n +$(( $keep + 1 ))| while read snap
do
    # Debugging
    #echo btrfs subvolume delete "$snap"
    btrfs subvolume delete "$snap" | grep -v 'Transaction commit:'
done
ls -rd ${vol}${pf}_rw.* | tail -n +$(( $keep + 1 ))| while read snap
do
    btrfs subvolume delete "$snap" | grep -v 'Transaction commit:'
done

# Same thing for destination (assume the same number of snapshots to keep,
# you can change this if you really want).

if [[ -z "$ssh" ]]; then
    for snap in $(ls -rd $dest_pool/${vol}${pf}_ro* | tail -n +$(( $keep + 1 )))
    do
	btrfs subvolume delete "$snap" | grep -v 'Transaction commit:'
    done
    for snap in $(ls -rd $dest_pool/${vol}${pf}_rw* | tail -n +$(( $keep + 1 )))
    do
	btrfs subvolume delete "$snap" | grep -v 'Transaction commit:'
    done
else
    for snap in $($ssh ls -rd $dest_pool/${vol}${pf}_'ro*' | tail -n +$(( $keep + 1 )))
    do
	$ssh btrfs subvolume delete "$snap" | grep -v 'Transaction commit:'
    done
    for snap in $($ssh ls -rd $dest_pool/${vol}${pf}_'rw*' | tail -n +$(( $keep + 1 )))
    do
	$ssh btrfs subvolume delete "$snap" | grep -v 'Transaction commit:'
    done
fi

rm $lock